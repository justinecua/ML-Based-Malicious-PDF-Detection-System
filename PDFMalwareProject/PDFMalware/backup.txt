import os
import joblib
import numpy as np
from django.shortcuts import render
from django.http import JsonResponse
from django.core.files.storage import FileSystemStorage
from django.views.decorators.csrf import csrf_exempt
from PyPDF2 import PdfReader
import fitz  # PyMuPDF
import pdfplumber
import re

# Load AI model and vectorizer
ai_model_path = 'PDFMalware/models17/js/js_obfuscation_detector_xgb.pkl'
vectorizer_path = 'PDFMalware/models17/js/tfidf_vectorizer.pkl'
ai_model = joblib.load(ai_model_path)
vectorizer = joblib.load(vectorizer_path)

# Existing models for PDF malware detection
model_path = 'PDFMalware/models17'
models = {
    'ensemble': joblib.load(os.path.join(model_path, 'ensemble_model.pkl')),
    'gradient_boosting': joblib.load(os.path.join(model_path, 'gradient_boosting_model.pkl')),
    'lightgbm': joblib.load(os.path.join(model_path, 'lightgbm_model.pkl')),
    'random_forest': joblib.load(os.path.join(model_path, 'random_forest_model.pkl')),
    'svm': joblib.load(os.path.join(model_path, 'svm_model.pkl')),
    'xgboost': joblib.load(os.path.join(model_path, 'xgboost_model.pkl'))
}

def extract_pdf_streams_and_js(pdf_path):
    """
    Extract JavaScript and embedded streams from PDFs using PyMuPDF and PyPDF2.
    """
    extracted_streams = []

    # Extract streams using PyMuPDF
    pdf_document = fitz.open(pdf_path)
    for xref in range(1, pdf_document.xref_length()):
        try:
            stream = pdf_document.xref_stream(xref)
            if stream:
                extracted_streams.append(stream.decode("utf-8", errors="ignore"))
        except Exception:
            pass
    pdf_document.close()

    # Extract JavaScript using PyPDF2
    try:
        reader = PdfReader(pdf_path)
        for page in reader.pages:
            # Check OpenAction JavaScript
            if '/OpenAction' in page:
                action = page['/OpenAction']
                if '/JS' in action:
                    js_code = action['/JS'].get_object()
                    extracted_streams.append(js_code)
            # Check Additional Action JavaScript
            if '/AA' in page:
                aa_action = page['/AA']
                for key in aa_action:
                    if '/JS' in aa_action[key]:
                        js_code = aa_action[key]['/JS'].get_object()
                        extracted_streams.append(js_code)
    except Exception as e:
        print(f"Error extracting JavaScript: {e}")

    return extracted_streams


def extract_embedded_javascript(pdf_path):
    """
    Extract embedded JavaScript from PDFs, specifically `/OpenAction` JavaScript.
    """
    try:
        reader = PdfReader(pdf_path)
        javascript_code = []
        for page in reader.pages:
            if '/OpenAction' in page.keys():
                action = page['/OpenAction']
                if '/JS' in action:
                    javascript_code.append(action['/JS'])
        return javascript_code
    except Exception as e:
        print(f"Error extracting JavaScript: {e}")
        return []


def extract_full_text(pdf_path):
    """
    Extract full text from a PDF file using pdfplumber.
    """
    full_text = ""
    try:
        with pdfplumber.open(pdf_path) as pdf:
            for page in pdf.pages:
                text = page.extract_text()
                if text:
                    full_text += text + "\n"
    except Exception as e:
        print(f"Error extracting full text from PDF: {e}")
    return full_text


def preprocess_js(js_code):
    """
    Preprocess JavaScript code for prediction.
    """
    js_code = re.sub(r"//.*?$|/\*.*?\*/", "", js_code, flags=re.DOTALL)  # Remove comments
    js_code = re.sub(r"\s+", " ", js_code)  # Remove extra whitespace
    return js_code.strip()

def extract_features_from_pdf(uploaded_file_path):
    # Implement your PDF feature extraction logic here
    return np.random.rand(1, 20)  # Example placeholder

@csrf_exempt
def predict(request):
    if request.method == 'POST' and request.FILES.get('pdf_file'):
        pdf_file = request.FILES['pdf_file']
        fs = FileSystemStorage(location='uploads')
        file_path = fs.save(pdf_file.name, pdf_file)
        uploaded_file_path = os.path.join(fs.location, file_path)

        try:
            # Extract features for PDF malware detection
            features = extract_features_from_pdf(uploaded_file_path)

            # Extract embedded JavaScript and streams
            streams = extract_pdf_streams_and_js(uploaded_file_path)
            js_code = extract_embedded_javascript(uploaded_file_path)
            streams.extend(js_code)  # Combine all JavaScript sources

            # Extract full text for additional analysis
            full_text = extract_full_text(uploaded_file_path)

            # Combine and preprocess all JavaScript code for AI prediction
            combined_js = " ".join(streams)
            preprocessed_js = preprocess_js(combined_js)

            # Use vectorizer to transform preprocessed JavaScript code
            js_features = vectorizer.transform([preprocessed_js])

            # Predict obfuscation using the AI model
            obfuscation_prediction = ai_model.predict(js_features)
            obfuscation_confidence = ai_model.predict_proba(js_features)[0][1] * 100

            # Detect obfuscated code from streams and text
            extracted_obfuscated_code = []
            for stream in streams:
                extracted_obfuscated_code.extend(extract_obfuscated_code(stream))
            extracted_obfuscated_code.extend(extract_obfuscated_code(full_text))

            # Make predictions for PDF malware detection
            model_predictions = {name: model.predict_proba(features) for name, model in models.items()}
            highest_malicious = max((float(pred[0][1] * 100), name) for name, pred in model_predictions.items())
            highest_safe = max((float(pred[0][0] * 100), name) for name, pred in model_predictions.items())

            # Prepare response
            response = {
                'malicious_percentage': highest_malicious[0],
                'most_suspicious_model': highest_malicious[1],
                'safest_percentage': highest_safe[0],
                'safest_model': highest_safe[1],
                'model_probabilities': {
                    name: {
                        'malicious': float(pred[0][1] * 100),
                        'safe': float(pred[0][0] * 100)
                    } for name, pred in model_predictions.items()
                },
                'is_obfuscated': obfuscation_prediction[0] == 1,
                'obfuscation_confidence': obfuscation_confidence,
                'extracted_obfuscated_code': extracted_obfuscated_code,
                'extracted_pdf_streams': streams,
                'full_text': full_text[:1000],  # Limit to first 1000 chars for brevity
            }
            return render(request, 'home.html', {'result': response})

        except Exception as e:
            response = {'error': str(e)}
            return render(request, 'home.html', {'result': response})

        finally:
            os.remove(uploaded_file_path)
    else:
        return render(request, 'home.html')


@csrf_exempt
def homepage(request):
    """
    Render an upload form for PDF files.
    """
    if request.method == 'POST':
        if 'pdf_file' in request.FILES:
            pdf_file = request.FILES['pdf_file']
            fs = FileSystemStorage()
            filename = fs.save(pdf_file.name, pdf_file)
            file_url = fs.url(filename)
            return JsonResponse({'message': 'File uploaded successfully.', 'file_url': file_url})
    else:
        return render(request, 'home.html')

