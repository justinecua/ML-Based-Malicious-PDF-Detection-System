from django.core.management.base import BaseCommand
import pandas as pd
import joblib
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from imblearn.over_sampling import SMOTE
from sklearn.metrics import classification_report

class Command(BaseCommand):
    help = "Retrain machine learning models"

    def handle(self, *args, **kwargs):
        # Load dataset
        df = pd.read_csv('PDFMalware2022.csv')
        
        # Inspect the initial DataFrame
        print("Initial DataFrame shape:", df.shape)
        print("First few rows:\n", df.head())
        print("Unique Class values before filtering:", df['Class'].unique())

        # Filter for the classes "Malicious" and "Benign"
        df = df[df['Class'].isin(["Malicious", "Benign"])]
        print(f"DataFrame after filtering: {df.shape}")  # Debugging line

        # Check if DataFrame is empty after filtering
        if df.empty:
            self.stdout.write(self.style.ERROR("No data available after filtering!"))
            return

        # Handle missing values and preprocess as before
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())
        
        # Convert 'Class' column to numeric
        df['Class'] = df['Class'].astype(str)  # Ensure it's a string
        le = LabelEncoder()
        df['Class'] = le.fit_transform(df['Class'])

        df_cleaned = df.drop(columns=['header', 'Fine name', 'Class'])
        df_cleaned = df_cleaned.apply(pd.to_numeric, errors='coerce')
        df_cleaned.fillna(df_cleaned.mean(), inplace=True)

        features = df_cleaned
        target = df['Class']

        scaler = StandardScaler()
        features_scaled = scaler.fit_transform(features)

        X_train, X_test, y_train, y_test = train_test_split(features_scaled, target, test_size=0.2, random_state=42)

        smote = SMOTE()
        X_resampled, y_resampled = smote.fit_resample(X_train, y_train)

        rf_model = RandomForestClassifier(class_weight='balanced')
        svm_model = SVC(probability=True, class_weight='balanced')
        gb_model = GradientBoostingClassifier()

        rf_model.fit(X_resampled, y_resampled)
        svm_model.fit(X_resampled, y_resampled)
        gb_model.fit(X_resampled, y_resampled)

        # Evaluate models
        for model_name, model in [('Random Forest', rf_model), ('SVM', svm_model), ('Gradient Boosting', gb_model)]:
            y_pred = model.predict(X_test)
            print(f"{model_name} Model Evaluation:")
            print(classification_report(y_test, y_pred, zero_division=0))
            accuracy = (y_pred == y_test).mean()
            print(f"Accuracy: {accuracy}\n")

        # Save the models
        joblib.dump(rf_model, 'PDFMalware/models/rf_model.pkl')
        joblib.dump(svm_model, 'PDFMalware/models/svm_model.pkl')
        joblib.dump(gb_model, 'PDFMalware/models/gb_model.pkl')
        joblib.dump(scaler, 'PDFMalware/models/scaler.pkl')
        joblib.dump(le, 'PDFMalware/models/label_encoder.pkl')

        self.stdout.write("Models retrained and saved successfully.")

