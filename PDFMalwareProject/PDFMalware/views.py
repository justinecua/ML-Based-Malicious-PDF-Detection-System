from django.shortcuts import render
from django.http import JsonResponse
from .load_models import get_models
import numpy as np
import pandas as pd

# Load models at the start
rf_model, svm_model, gb_model, scaler, le = get_models()

def predict_pdf(request):
    # Simulate receiving data (e.g., from POST request or query parameters)
    data = request.POST.get('data')
    if not data:
        return JsonResponse({"error": "No data provided."}, status=400)

    # Convert incoming data to a DataFrame (replace with actual data parsing)
    new_data = pd.DataFrame([data])  # Adjust according to your data structure

    # Scale the data using the loaded scaler
    new_data_scaled = scaler.transform(new_data)

    # Get probability predictions from each model
    rf_probs = rf_model.predict_proba(new_data_scaled)[:, 1]
    svm_probs = svm_model.predict_proba(new_data_scaled)[:, 1]
    gb_probs = gb_model.predict_proba(new_data_scaled)[:, 1]

    # Calculate weights based on accuracy (you may want to store this in a more permanent location)
    rf_weight = 0.33
    svm_weight = 0.33
    gb_weight = 0.34

    # Weighted average probabilities
    ensemble_probs = (rf_weight * rf_probs) + (svm_weight * svm_probs) + (gb_weight * gb_probs)

    # Final predictions (adjust threshold as needed)
    final_predictions = np.where(ensemble_probs > 0.5, 1, 0)

    return JsonResponse({"predictions": final_predictions.tolist()})


