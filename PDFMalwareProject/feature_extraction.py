from pdfminer.high_level import extract_text
from pdfminer.pdfparser import PDFParser
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdfpage import PDFPage
from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
from pdfminer.pdfdevice import PDFDevice
from pdfminer.converter import TextConverter
from pdfminer.layout import LAParams
import io
import os

def count_keyword_occurrences(content, keywords):
    return sum(content.count(keyword) for keyword in keywords)

def extract_features_from_pdf(pdf_path):
    features = {}
    
    # Open the PDF file
    with open(pdf_path, 'rb') as file:
        parser = PDFParser(file)
        document = PDFDocument(parser)
        
        # Basic properties
        features['pdfsize'] = os.path.getsize(pdf_path)
        features['isEncrypted'] = int(document.is_encrypted)
        features['pages'] = sum(1 for _ in PDFPage.create_pages(document))  # Count number of pages
        
        # Metadata
        metadata = document.info[0] if document.info else {}
        features['metadata size'] = sum(len(str(v)) for v in metadata.values())
        features['title characters'] = len(metadata.get('Title', '').encode('utf-8'))
        
        # Initialize feature counters
        features.update({
            'embedded files': 0, 'images': 0, 'text': 0, 'header': 0, 'obj': 0,
            'endobj': 0, 'stream': 0, 'endstream': 0, 'xref': 0, 'trailer': 0,
            'startxref': 0, 'pageno': 0, 'encrypt': 0, 'ObjStm': 0, 'JS': 0,
            'Javascript': 0, 'AA': 0, 'OpenAction': 0, 'Acroform': 0, 'JBIG2Decode': 0,
            'RichMedia': 0, 'launch': 0, 'EmbeddedFile': 0, 'XFA': 0, 'Colors': 0
        })
        
        # Extract text for analysis
        try:
            pdf_text = extract_text(pdf_path)
            features['text'] = len(pdf_text)  # Character count of the text
        except Exception as e:
            print(f"Error extracting text from {pdf_path}: {e}")
        
        # Analyze raw PDF content
        file.seek(0)
        raw_content = file.read().decode(errors='ignore')
        
        # Count occurrences of specific elements
        features['obj'] = raw_content.count('obj')
        features['endobj'] = raw_content.count('endobj')
        features['stream'] = raw_content.count('stream')
        features['endstream'] = raw_content.count('endstream')
        features['xref'] = raw_content.count('xref')
        features['trailer'] = raw_content.count('trailer')
        features['startxref'] = raw_content.count('startxref')
        features['encrypt'] = raw_content.count('Encrypt')
        features['embedded files'] = raw_content.count('/EmbeddedFile')
        features['images'] = raw_content.count('/Image')
        features['JS'] = raw_content.count('/JS')
        features['Javascript'] = raw_content.count('/JavaScript')
        features['AA'] = raw_content.count('/AA')
        features['OpenAction'] = raw_content.count('/OpenAction')
        features['Acroform'] = raw_content.count('/AcroForm')
        features['JBIG2Decode'] = raw_content.count('/JBIG2Decode')
        features['RichMedia'] = raw_content.count('/RichMedia')
        features['launch'] = raw_content.count('/Launch')
        features['XFA'] = raw_content.count('/XFA')
        features['ObjStm'] = raw_content.count('/ObjStm')
        
        # Detect colors (dummy example, refine as needed)
        features['Colors'] = raw_content.lower().count('rgb') + raw_content.lower().count('cmyk')

    return features

