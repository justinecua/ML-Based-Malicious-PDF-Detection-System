import numpy as np
import os
import pickle  # For saving the tokenizer
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Dropout
from sklearn.model_selection import train_test_split
from tensorflow.keras.callbacks import ModelCheckpoint

# Constants for directories
OBFUSCATED_DIR = "./Datasets/JavascriptSamplesObfuscated"
NON_OBFUSCATED_DIR = "./Datasets/JavascriptSamplesNotObfuscated"
TOKENIZER_SAVE_PATH = './PDFMalware/models17/js/tfidf_vectorizer.pkl'
MODEL_SAVE_PATH = './PDFMalware/models17/js/js_obfuscation_detector_lstm.keras'

# Function to load JavaScript files and assign labels
def load_and_tokenize_files(directory, label):
    texts = []
    for file_name in os.listdir(directory):
        if file_name.endswith(".js"):
            file_path = os.path.join(directory, file_name)
            with open(file_path, 'r', encoding='utf-8') as file:
                code = file.read()
                texts.append((code, label))
    return texts

# Collect all data
obfuscated_data = load_and_tokenize_files(OBFUSCATED_DIR, 1)
non_obfuscated_data = load_and_tokenize_files(NON_OBFUSCATED_DIR, 0)
all_data = obfuscated_data + non_obfuscated_data

# Split data and labels
texts, labels = zip(*all_data)
labels = np.array(labels)

# Tokenize text
tokenizer = Tokenizer()
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)
word_index = tokenizer.word_index

# Save the tokenizer
with open(TOKENIZER_SAVE_PATH, 'wb') as f:
    pickle.dump(tokenizer, f)
print(f"Tokenizer saved to {TOKENIZER_SAVE_PATH}")

# Pad sequences to ensure uniform input size
data = pad_sequences(sequences, maxlen=500)  # max length of sequences

# Split the data
X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)

# Build the LSTM model
model = Sequential([
    Embedding(input_dim=len(word_index) + 1, output_dim=128, input_length=500),
    LSTM(64, dropout=0.2, recurrent_dropout=0.2),
    Dense(1, activation='sigmoid')
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

# Train the model
checkpoint = ModelCheckpoint('best_model.keras', monitor='val_loss', save_best_only=True)
model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.2, callbacks=[checkpoint])

# Load the best model and evaluate on the test set
model.load_weights('best_model.keras')
loss, accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {accuracy * 100:.2f}%")

# Save the final model
model.save(MODEL_SAVE_PATH)
print(f"Model saved to {MODEL_SAVE_PATH}")

